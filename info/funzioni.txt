Definizione:
    E' un blocco di codice che può essere riutilizzato.

Utilizzo:
    Le funzioni permettono di riutilizzare parti di codice e quindi vengono utilizzare per risolvere più problemi di uno stesso tipo.
    Le funzioni devono avere dei dati di input e dei dati di output.
    Le funzioni possono essere di vari tipi come le variabili, per esempio: int, float e char, però c'è anche un altro tipo chiamato void.
    La funzione void ha la particolarità di non restituire alcun valore e quindi non contiene l'istruzione return

Sintassi:
    Dichiarazione:
        int func(/*Dati di input*/); /*Prototipo*/

        int main() {
            int a = func(/*Dati da passare alla funzione*/);
            return 0;
        }

        int func(/*Dati di input*/) { /*Corpo*/
            /*Codice da eseguire*/
            return /*valore da restituire*/;
        }

        /*N.B. La funzione è stata dichiarata prima del main perchè quando il controllo parte dal main, la funzione deve essere già stata dichiarata, altrimenti restituirebbe un errore.
        Il corpo della funzione può anche essere scritto direttamente prima del main, dentro la dichiarazione ma per convenzione si preferisce scrivere il coripo delle funzioni dopo il main per evitare che in programmi con molte funzioni il main vada alla fine del codice rendendolo meno leggibile
        Le funzioni devono sempre avere l'istruzione return, ad eccezione del void.
        Le funzioni void vengono chiamate procedure.*/

    Le procedure:
        void func(/*Dati di input*/); /*Prototipo*/

        int main() {
            func(/*Dati da passare alla funzione*/);
            return 0;
        }

        void func(/*Dati di input*/) { /*Corpo*/
            /*Codice da eseguire*/
        }

Le funzioni void possono anche essere utilizzare per restituire più di un valore tramite puntatori o array passati per indirizzo, vedi puntatori.